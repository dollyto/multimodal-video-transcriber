name: Test Multimodal Video Transcriber

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports
      run: |
        python -c "import transcriber; import visualizer; import models; import config; print('✅ All modules imported successfully')"
    
    - name: Test configuration
      run: |
        python -c "from config import Config; print('✅ Configuration module works')"
    
    - name: Test models
      run: |
        python -c "from models import VideoTranscription, TranscriptSegment, Speaker; print('✅ Data models work')"
    
    - name: Test transcriber initialization
      run: |
        python -c "from transcriber import VideoTranscriber; t = VideoTranscriber(skip_config_validation=True); print('✅ Transcriber initialized')"
    
    - name: Test visualizer initialization
      run: |
        python -c "from visualizer import TranscriptionVisualizer; v = TranscriptionVisualizer(); print('✅ Visualizer initialized')"
    
    - name: Test Streamlit app
      run: |
        python -c "import streamlit as st; print('✅ Streamlit works')"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          *.log
          test_output/
